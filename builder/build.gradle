apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply from: '../resourceGeneratorTask.gradle'
apply plugin: 'kotlinx-serialization'
kotlin {
    def nativeEntryPoint = 'pw.binom.builder.main'
    linuxX64 { // Use your target instead.
        binaries {
            executable {
                entryPoint = nativeEntryPoint
            }
        }
    }

    linuxArm32Hfp { // Use your target instead.
        binaries {
            executable {
                entryPoint = nativeEntryPoint
            }
        }
    }

    mingwX64 { // Use your target instead.
        binaries {
            executable {
                entryPoint = nativeEntryPoint
            }
        }
    }

    mingwX86 { // Use your target instead.
        binaries {
            executable {
                entryPoint = nativeEntryPoint
            }
        }
    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    presets.forEach {
        println("target=${it.name}")
    }

    sourceSets {

        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api "pw.binom.io:core:$network_version"
                api "pw.binom.io:httpServer:$network_version"
                api "pw.binom.io:httpClient:$network_version"
                api "pw.binom.io:process:$network_version"
                api "pw.binom.io:file:$network_version"
                api "pw.binom.io:thread:$network_version"
                api "pw.binom.io:logger:$network_version"
                api "pw.binom.io:flux:$network_version"
                api "pw.binom.io:sqlite:$network_version"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                api project(":common")
            }

            kotlin.srcDir('build/gen/server')
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        nativeMain {
            dependencies {
                dependsOn commonMain
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }

        mingwX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX86Main {
            dependencies {
                dependsOn mingwX64Main
            }
        }

        linuxX64Main {
            dependencies {
                dependsOn nativeMain
            }
        }

        linuxArm32HfpMain {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
}

task generateJsSource(type: ResourceSourceGenerator) {
    dependsOn ":web:runDceJsKotlin"
    destination = file("${project.buildFile.parentFile}/build/gen/server/resources.kt")
    packageName = "pw.binom.builder"
    objectName = "Resources"

    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/kotlin.js"), "kotlin_js")
    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/common.js"), "common_js")
    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/core.js"), "core_js")
    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/web.js"), "web_js")
    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/kotlinx-serialization-kotlinx-serialization-runtime.js"), "kotlinx_serialization_js")
    addFile(file("${project(":web").buildDir}/kotlin-js-min/js/main/org.tlsys.css.js"), "css_js")
    addFile(file("src/commonMain/resources/light-background.jpg"))
    addFile(file("src/commonMain/resources/ace.js"))
    addFile(file("src/commonMain/resources/theme-tomorrow_night.js"))
    addFile(file("src/commonMain/resources/mode-sh.js"))
}



compileKotlinJvm {
    dependsOn generateJsSource
}

linkReleaseExecutableLinuxArm32Hfp {
    dependsOn generateJsSource
}

linkReleaseExecutableLinuxX64 {
    dependsOn generateJsSource
}

linkReleaseExecutableMingwX64 {
    dependsOn generateJsSource
}

linkReleaseExecutableMingwX86 {
    dependsOn generateJsSource
}

jvmJar {
    with {
        from {
            (configurations.jvmRuntimeClasspath).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    }
    manifest {
        attributes 'Main-Class': "pw.binom.builder.MainKt"
    }
}


task runMainExecutableJvm(dependsOn: jvmJar, group: "run") {

    doLast {
        def args1 = [jvmJar.archiveFile.get()]
        args1.addAll(System.getenv("ARGS").split(" "))
        javaexec { main = "-jar"; args args1 }
    }
}